// Script com transa√ß√µes separadas para registro e airdrop - SOLU√á√ÉO FINAL PARA SLOT 3
const { 
  Connection, 
  Keypair, 
  PublicKey, 
  TransactionMessage, 
  VersionedTransaction,
  ComputeBudgetProgram,
  TransactionInstruction,
  Transaction,
  SystemProgram,
  SYSVAR_RENT_PUBKEY
} = require('@solana/web3.js');
const { AnchorProvider, Program, BN, Wallet, utils } = require('@coral-xyz/anchor');
const fs = require('fs');
const path = require('path');

// Receber par√¢metros da linha de comando
const args = process.argv.slice(2);
const walletPath = args[0] || './carteiras/carteira1.json';
const configPath = args[1] || './matriz-config.json';
const referrerAddressStr = args[2]; // Obrigat√≥rio
const altAddress = args[3]; // Obrigat√≥rio

// Endere√ßos verificados (igual ao contrato)
const VERIFIED_ADDRESSES = {
  // Pool Meteora
  POOL_ADDRESS: new PublicKey("FrQ5KsAgjCe3FFg6ZENri8feDft54tgnATxyffcasuxU"),
  
  // Vault A (DONUT)
  A_VAULT: new PublicKey("4ndfcH16GKY76bzDkKfyVwHMoF8oY75KES2VaAhUYksN"),
  A_VAULT_LP: new PublicKey("CocstBGbeDVyTJWxbWs4docwWapVADAo1xXQSh9RfPMz"),
  A_VAULT_LP_MINT: new PublicKey("6f2FVX5UT5uBtgknc8fDj119Z7DQoLJeKRmBq7j1zsVi"),
  A_TOKEN_VAULT: new PublicKey("6m1wvYoPrwjAnbuGMqpMoodQaq4VnZXRjrzufXnPSjmj"),
  
  // Vault B (SOL)
  B_VAULT_LP: new PublicKey("HJNs8hPTzs9i6AVFkRDDMFVEkrrUoV7H7LDZHdCWvxn7"),
  B_VAULT: new PublicKey("FERjPVNEa7Udq8CEv68h6tPL46Tq7ieE49HrE2wea3XT"),
  B_TOKEN_VAULT: new PublicKey("HZeLxbZ9uHtSpwZC3LBr4Nubd14iHwz7bRSghRZf5VCG"),
  B_VAULT_LP_MINT: new PublicKey("BvoAjwEDhpLzs3jtu4H72j96ShKT5rvZE9RP1vgpfSM"),
  
  // Tokens
  TOKEN_MINT: new PublicKey("F1vCKXMix75KigbwZUXkVU97NiE1H2ToopttH67ydqvq"),
  WSOL_MINT: new PublicKey("So11111111111111111111111111111111111111112"),
  
  // Programas Meteora
  METEORA_VAULT_PROGRAM: new PublicKey("24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi"),
  METEORA_AMM_PROGRAM: new PublicKey("Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB"),
  
  // Protocol Fees
  PROTOCOL_TOKEN_B_FEE: new PublicKey("88fLv3iEY7ubFCjwCzfzA7FsPG8xSBFicSPS8T8fX4Kq"),
  
  // Chainlink (Devnet)
  CHAINLINK_PROGRAM: new PublicKey("HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny"),
  SOL_USD_FEED: new PublicKey("99B2bTijsU6f1GCT73HmdR7HCFFjGMBcPZY6jZ96ynrR"),
  
  // Programa de Airdrop
  AIRDROP_PROGRAM_ID: new PublicKey("J1Ad1njQ5snM2nADWr47pDxPJaicprCrwpqfzWmPv7DX"),
};

// Programas do sistema
const SPL_TOKEN_PROGRAM_ID = new PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA");
const SYSTEM_PROGRAM_ID = new PublicKey("11111111111111111111111111111111");
const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");

// Discriminadores para instru√ß√µes do programa de airdrop
const REGISTER_MATRIX_WITH_CREATE_DISCRIMINATOR = Buffer.from([68, 201, 129, 230, 125, 165, 234, 125]);
const REGISTER_MATRIX_EXISTING_DISCRIMINATOR = Buffer.from([250, 108, 76, 22, 238, 239, 87, 21]);

// Fun√ß√£o para dormir
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para mostrar detalhes da ALT
async function getAddressLookupTable(connection, altAddress) {
  console.log("\nüìã OBTENDO ADDRESS LOOKUP TABLE:");
  
  try {
    const lookupTableInfo = await connection.getAddressLookupTable(new PublicKey(altAddress));
    if (!lookupTableInfo.value) {
      console.log("‚ùå ALT n√£o encontrada!");
      return null;
    }
    
    const lookupTable = lookupTableInfo.value;
    console.log(`‚úÖ ALT encontrada: ${altAddress}`);
    console.log(`üî¢ Total de endere√ßos: ${lookupTable.state.addresses.length}`);
    
    console.log("\nüìã LISTA DE ENDERE√áOS NA ALT:");
    lookupTable.state.addresses.forEach((address, index) => {
      console.log(`  ${index}: ${address.toString()}`);
    });
    
    return lookupTable;
  } catch (error) {
    console.error(`‚ùå Erro ao obter ALT: ${error}`);
    return null;
  }
}

// Fun√ß√£o para preparar as contas do programa de airdrop para o slot 3
async function prepareAirdropAccounts(connection, referrerAddress) {
  console.log("\nü™Ç PREPARANDO CONTAS DO PROGRAMA DE AIRDROP...");
  
  // Derivar a PDA do estado do programa
  const [programStatePda] = PublicKey.findProgramAddressSync(
    [Buffer.from("program_state", "utf8")],
    VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID
  );
  console.log(`  üìù Program State PDA: ${programStatePda.toString()}`);
  
  // Verificar se a conta de estado existe
  const stateAccountInfo = await connection.getAccountInfo(programStatePda);
  if (!stateAccountInfo) {
    console.log(`  ‚ùå Estado do programa n√£o encontrado! Isso √© cr√≠tico.`);
    throw new Error("Estado do programa de airdrop n√£o encontrado");
  }
  
  // Derivar a PDA da conta do usu√°rio
  const [userAccountPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("user_account", "utf8"), referrerAddress.toBuffer()],
    VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID
  );
  console.log(`  üë§ User Account PDA: ${userAccountPda.toString()}`);
  
  // Verificar se o usu√°rio j√° existe no programa de airdrop
  let userExists = false;
  try {
    const userAccountInfo = await connection.getAccountInfo(userAccountPda);
    if (userAccountInfo && userAccountInfo.owner.equals(VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID)) {
      userExists = true;
      console.log(`  ‚úÖ Usu√°rio j√° existe no programa de airdrop`);
    } else {
      console.log(`  ‚ÑπÔ∏è Usu√°rio n√£o existe no programa de airdrop, ser√° criado`);
    }
  } catch (error) {
    console.log(`  ‚ö†Ô∏è Erro ao verificar conta de usu√°rio: ${error.message}`);
  }
  
  // Obter a semana atual com seguran√ßa
  let currentWeek = 1; // Valor padr√£o
  if (stateAccountInfo && stateAccountInfo.data.length >= 73) {
    currentWeek = stateAccountInfo.data[72]; // O byte da current_week est√° na posi√ß√£o 72
    console.log(`  üìÖ Semana atual: ${currentWeek}`);
  } else {
    console.log(`  ‚ö†Ô∏è Formato inesperado da conta de estado, usando semana padr√£o 1`);
  }
  
  // Derivar as PDAs dos dados das semanas
  const [currentWeekDataPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("weekly_data", "utf8"), Buffer.from([currentWeek])],
    VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID
  );
  console.log(`  üìä Current Week Data PDA: ${currentWeekDataPda.toString()}`);
  
  // Verificar se a conta da semana atual existe
  const weekDataInfo = await connection.getAccountInfo(currentWeekDataPda);
  if (!weekDataInfo) {
    console.log(`  ‚ö†Ô∏è Dados da semana atual n√£o encontrados. Criando na transa√ß√£o.`);
  } else {
    console.log(`  ‚úÖ Dados da semana atual encontrados`);
  }
  
  const [nextWeekDataPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("weekly_data", "utf8"), Buffer.from([currentWeek + 1])],
    VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID
  );
  console.log(`  üìä Next Week Data PDA: ${nextWeekDataPda.toString()}`);
  
  return {
    programStatePda,
    userAccountPda,
    currentWeekDataPda,
    nextWeekDataPda,
    userExists,
    currentWeek
  };
}

// Fun√ß√£o adaptada para preparar uplines - SEM ATAs DE TOKENS
async function prepareUplinesForRecursion(connection, program, uplinePDAs) {
  const remainingAccounts = [];
  const triosInfo = [];

  console.log(`\nüîÑ PREPARANDO ${uplinePDAs.length} UPLINES (MAX 6) PARA RECURSIVIDADE`);

  // Coletar informa√ß√µes das uplines
  for (let i = 0; i < Math.min(uplinePDAs.length, 6); i++) {
    const uplinePDA = uplinePDAs[i];
    console.log(`  Analisando upline ${i + 1}: ${uplinePDA.toString()}`);

    try {
      const uplineInfo = await program.account.userAccount.fetch(uplinePDA);

      if (!uplineInfo.isRegistered) {
        console.log(`  ‚ùå Upline n√£o est√° registrado! Ignorando.`);
        continue;
      }

      // Determinar wallet do upline
      let uplineWallet;

      // Usar o campo owner_wallet
      if (uplineInfo.ownerWallet) {
        uplineWallet = uplineInfo.ownerWallet;
        console.log(`  ‚úÖ Wallet: ${uplineWallet.toString()}`);
      } else {
        console.log(`  ‚ö†Ô∏è Campo owner_wallet n√£o encontrado`);
        continue;
      }

      // Armazenar informa√ß√µes
      triosInfo.push({
        pda: uplinePDA,
        wallet: uplineWallet,
        depth: parseInt(uplineInfo.upline.depth.toString()),
      });
    } catch (e) {
      console.log(`  ‚ùå Erro ao analisar upline: ${e.message}`);
    }
  }

  // Ordenar por profundidade DECRESCENTE
  triosInfo.sort((a, b) => b.depth - a.depth);
  
  console.log(`\nüìä ORDEM DE PROCESSAMENTO (Maior ‚Üí Menor profundidade):`);
  for (let i = 0; i < triosInfo.length; i++) {
    console.log(`  ${i + 1}. PDA: ${triosInfo[i].pda.toString()} (Depth: ${triosInfo[i].depth})`);
    console.log(`    Wallet: ${triosInfo[i].wallet.toString()}`);
  }

  // Construir remainingAccounts - IMPORTANTE: Precisamos apenas da PDA e da wallet
  for (const trio of triosInfo) {
    // 1. PDA da conta
    remainingAccounts.push({
      pubkey: trio.pda,
      isWritable: true,
      isSigner: false,
    });

    // 2. Wallet
    remainingAccounts.push({
      pubkey: trio.wallet,
      isWritable: true,
      isSigner: false,
    });
  }

  console.log(`  ‚úÖ Total de uplines: ${remainingAccounts.length / 2}`);
  console.log(`  ‚úÖ Total de contas: ${remainingAccounts.length}`);

  return remainingAccounts;
}

// Fun√ß√£o para derivar ATA
function getAssociatedTokenAddress(mint, owner) {
  const [address] = PublicKey.findProgramAddressSync(
    [
      owner.toBuffer(),
      SPL_TOKEN_PROGRAM_ID.toBuffer(),
      mint.toBuffer(),
    ],
    ASSOCIATED_TOKEN_PROGRAM_ID
  );
  return address;
}

// Fun√ß√£o para criar instru√ß√£o de cria√ß√£o de ATA
function createATAInstruction(payer, ataAddress, owner, mint) {
  return new TransactionInstruction({
    keys: [
      { pubkey: payer, isSigner: true, isWritable: true },
      { pubkey: ataAddress, isSigner: false, isWritable: true },
      { pubkey: owner, isSigner: false, isWritable: false },
      { pubkey: mint, isSigner: false, isWritable: false },
      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
      { pubkey: SPL_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
    ],
    programId: ASSOCIATED_TOKEN_PROGRAM_ID,
    data: Buffer.from([])
  });
}

// Fun√ß√£o para verificar se a transa√ß√£o foi confirmada
async function checkSignatureStatus(connection, signature, timeout = 60000) {
  const startTime = Date.now();
  let status = null;
  
  // Loop at√© obter status ou timeout
  while (Date.now() - startTime < timeout) {
    try {
      status = await connection.getSignatureStatus(signature, {
        searchTransactionHistory: true,
      });
      
      if (status && status.value) {
        if (status.value.err) {
          // Transa√ß√£o falhou
          return { confirmed: false, error: status.value.err };
        } else if (status.value.confirmationStatus === 'confirmed' || 
                  status.value.confirmationStatus === 'finalized') {
          // Transa√ß√£o confirmada
          return { confirmed: true, status: status.value.confirmationStatus };
        }
      }
      
      // Esperar antes de verificar novamente
      console.log(`  üîç Verificando status (${Math.round((Date.now() - startTime)/1000)}s/${Math.round(timeout/1000)}s)...`);
      await sleep(2000);
    } catch (e) {
      console.log(`  ‚ö†Ô∏è Erro ao verificar status: ${e.message}, tentando novamente...`);
      await sleep(2000);
    }
  }
  
  // Timeout
  return { confirmed: false, error: 'timeout' };
}

// Fun√ß√£o para criar instru√ß√£o de registro manual no airdrop (CPI manual)
function createAirdropRegistrationInstruction(
  referrerWallet,
  programStatePda, 
  userAccountPda, 
  currentWeekDataPda, 
  nextWeekDataPda,
  userExists,
  matrixProgramId
) {
  // Escolher o discriminador correto com base na exist√™ncia da conta do usu√°rio
  const discriminator = userExists ? 
    REGISTER_MATRIX_EXISTING_DISCRIMINATOR : 
    REGISTER_MATRIX_WITH_CREATE_DISCRIMINATOR;
  
  // Criar a lista de contas
  const accounts = [
    { pubkey: programStatePda, isSigner: false, isWritable: true },
    { pubkey: referrerWallet, isSigner: true, isWritable: true },
    { pubkey: userAccountPda, isSigner: false, isWritable: true },
    { pubkey: currentWeekDataPda, isSigner: false, isWritable: true },
    { pubkey: nextWeekDataPda, isSigner: false, isWritable: true },
    { pubkey: matrixProgramId, isSigner: false, isWritable: false },
    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },
  ];
  
  // Criar a instru√ß√£o
  return new TransactionInstruction({
    programId: VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID,
    keys: accounts,
    data: discriminator
  });
}

async function main() {
  try {
    console.log("üöÄ REGISTRANDO USU√ÅRIO COM REFERENCIADOR - SOLU√á√ÉO FINAL PARA SLOT 3 üöÄ");
    console.log("=====================================================================");

    // Verificar argumentos
    if (!referrerAddressStr || !altAddress) {
      console.error("‚ùå ERRO: Argumentos obrigat√≥rios faltando!");
      console.error("Uso: node register-slot3-solution.js <carteira> <config> <referenciador> <ALT>");
      return;
    }
    
    // Converter endere√ßos
    const referrerAddress = new PublicKey(referrerAddressStr);
    
    // Carregar carteira
    console.log(`Carregando carteira de ${walletPath}...`);
    const walletKeypair = Keypair.fromSecretKey(
      Uint8Array.from(JSON.parse(fs.readFileSync(walletPath, 'utf8')))
    );
    
    // Carregar IDL e config
    const idl = require('./target/idl/referral_system.json');
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    
    // Conex√£o com par√¢metros de timeout ampliados
    const connection = new Connection('https://api.devnet.solana.com', {
      commitment: 'confirmed',
      confirmTransactionInitialTimeout: 60000, // 60 segundos
      disableRetryOnRateLimit: false,
    });
    console.log('Conectando √† Devnet com timeout estendido (60s)');
    
    // Configurar endere√ßos
    const MATRIX_PROGRAM_ID = new PublicKey(config.programId);
    const STATE_ADDRESS = new PublicKey(config.stateAddress);
    
    // Provider e programa
    const anchorWallet = new Wallet(walletKeypair);
    const provider = new AnchorProvider(connection, anchorWallet, { 
      commitment: 'confirmed',
      skipPreflight: true,
    });
    const program = new Program(idl, MATRIX_PROGRAM_ID, provider);
    
    // Verificar saldo
    console.log("\nüë§ USU√ÅRIO: " + walletKeypair.publicKey.toString());
    console.log("üë• REFERENCIADOR: " + referrerAddress.toString());
    const balance = await connection.getBalance(walletKeypair.publicKey);
    console.log("üí∞ SALDO: " + balance / 1e9 + " SOL");
    
    // Valor do dep√≥sito (0.1 SOL como no script base.js)
    const DEPOSIT_AMOUNT = 100_000_000; // 0.1 SOL
    
    if (balance < DEPOSIT_AMOUNT + 10_000_000) {
      console.error("‚ùå Saldo insuficiente!");
      return;
    }
    
    // Verificar referenciador
    console.log("\nüîç VERIFICANDO REFERENCIADOR...");
    const [referrerPDA] = PublicKey.findProgramAddressSync(
      [Buffer.from("user_account"), referrerAddress.toBuffer()],
      MATRIX_PROGRAM_ID
    );
    
    let referrerInfo;
    try {
      referrerInfo = await program.account.userAccount.fetch(referrerPDA);
      if (!referrerInfo.isRegistered) {
        console.error("‚ùå Referenciador n√£o est√° registrado!");
        return;
      }
      
      console.log("‚úÖ Referenciador verificado");
      console.log("üìä Slots: " + referrerInfo.chain.filledSlots + "/3");
      
      const slotIndex = referrerInfo.chain.filledSlots;
      console.log("\nüéØ VOC√ä PREENCHER√Å O SLOT " + (slotIndex + 1));
      
      // Informar l√≥gica do slot
      if (slotIndex === 0) {
        console.log("üí± Slot 1: Swap SOL ‚Üí DONUT e burn de 100% [SPLIT: Transa√ß√£o √∫nica]");
      } else if (slotIndex === 1) {
        console.log("üí∞ Slot 2: Reserva SOL para o referenciador [SPLIT: Transa√ß√£o √∫nica]");
      } else if (slotIndex === 2) {
        console.log("üîÑ Slot 3: Paga SOL reservado e processa recurs√£o [SPLIT: Duas transa√ß√µes]");
      }
    } catch (e) {
      console.error("‚ùå Erro ao verificar referenciador:", e);
      return;
    }
    
    // Verificar se usu√°rio j√° est√° registrado
    const [userPDA] = PublicKey.findProgramAddressSync(
      [Buffer.from("user_account"), walletKeypair.publicKey.toBuffer()],
      MATRIX_PROGRAM_ID
    );
    
    try {
      const userInfo = await program.account.userAccount.fetch(userPDA);
      if (userInfo.isRegistered) {
        console.log("‚ö†Ô∏è Voc√™ j√° est√° registrado!");
        return;
      }
    } catch {
      console.log("‚úÖ Usu√°rio n√£o registrado, prosseguindo...");
    }
    
    // Derivar PDAs necess√°rias
    console.log("\nüîß DERIVANDO PDAs...");
    
    const [programSolVault] = PublicKey.findProgramAddressSync(
      [Buffer.from("program_sol_vault")],
      MATRIX_PROGRAM_ID
    );
    console.log("üí∞ Program SOL Vault: " + programSolVault.toString());
    
    // ATAs necess√°rias
    const userWsolAccount = getAssociatedTokenAddress(
      VERIFIED_ADDRESSES.WSOL_MINT, 
      walletKeypair.publicKey
    );
    const userDonutAccount = getAssociatedTokenAddress(
      VERIFIED_ADDRESSES.TOKEN_MINT, 
      walletKeypair.publicKey
    );
    
    console.log("üíµ User WSOL ATA: " + userWsolAccount.toString());
    console.log("üç© User DONUT ATA: " + userDonutAccount.toString());
    
    // Verificar exist√™ncia de ATAs - agora apenas para informa√ß√£o
    console.log("\nüîß VERIFICANDO ATAs...");
    
    const wsolInfo = await connection.getAccountInfo(userWsolAccount);
    console.log(wsolInfo ? "‚úÖ WSOL ATA existe" : "‚ö†Ô∏è WSOL ATA n√£o existe - ser√° criada na transa√ß√£o principal");
    
    const donutInfo = await connection.getAccountInfo(userDonutAccount);
    console.log(donutInfo ? "‚úÖ DONUT ATA existe" : "‚ö†Ô∏è DONUT ATA n√£o existe - ser√° criada na transa√ß√£o principal");
    
    // Preparar uplines se for slot 3
    let uplineAccounts = [];
    let airdropInfo = null;
    const isSlot3 = referrerInfo.chain.filledSlots === 2;
    
    if (isSlot3) {
      console.log("\nüîÑ SLOT 3 DETECTADO - Preparando recursividade...");
      
      if (referrerInfo.upline?.upline?.length > 0) {
        const uplines = referrerInfo.upline.upline.map(entry => entry.pda);
        uplineAccounts = await prepareUplinesForRecursion(connection, program, uplines);
      } else {
        console.log("‚ÑπÔ∏è N√£o h√° uplines para processar (usu√°rio base)");
      }
      
      // NOVO: Preparar contas do programa de airdrop para o slot 3
      airdropInfo = await prepareAirdropAccounts(connection, referrerAddress);
    }
    
    // Carregar ALT
    console.log("\nüîç CARREGANDO ALT...");
    const lookupTableAccount = await getAddressLookupTable(connection, altAddress);
    
    if (!lookupTableAccount) {
      console.error("‚ùå ALT n√£o encontrada!");
      return;
    }
    
    // Preparar transa√ß√£o - NOVA ABORDAGEM COM DIVIS√ÉO
    console.log("\nüì§ PREPARANDO TRANSA√á√ïES...");
    
    try {
      // ===== PARTE 1: REGISTRO PRINCIPAL =====
      
      // Obter blockhash recente para a primeira transa√ß√£o
      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed');
      
      // Criar array de instru√ß√µes para a transa√ß√£o principal
      const mainInstructions = [];
      
      // Instru√ß√µes de compute budget - SEMPRE V√äM PRIMEIRO
      // Usar valores altos para garantir que a transa√ß√£o seja processada rapidamente
      const computeUnits = isSlot3 ? 1_000_000 : 1_400_000; // Reduzido para slot 3 pois dividimos a l√≥gica
      const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({
        units: computeUnits
      });
      mainInstructions.push(modifyComputeUnits);
      
      // Prioridade alta para todas as transa√ß√µes
      const setPriority = ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: 250000 // Aumentado significativamente
      });
      mainInstructions.push(setPriority);
      
      // Adicionar instru√ß√µes para criar ATAs, se necess√°rio
      if (!wsolInfo) {
        console.log("  ‚ûï Adicionando instru√ß√£o para criar WSOL ATA");
        const createWsolATA = createATAInstruction(
          walletKeypair.publicKey,
          userWsolAccount,
          walletKeypair.publicKey,
          VERIFIED_ADDRESSES.WSOL_MINT
        );
        mainInstructions.push(createWsolATA);
      }
      
      if (!donutInfo) {
        console.log("  ‚ûï Adicionando instru√ß√£o para criar DONUT ATA");
        const createDonutATA = createATAInstruction(
          walletKeypair.publicKey,
          userDonutAccount,
          walletKeypair.publicKey,
          VERIFIED_ADDRESSES.TOKEN_MINT
        );
        mainInstructions.push(createDonutATA);
      }
      
      // Remaining accounts para a transa√ß√£o principal
      const vaultAAccounts = [
        { pubkey: VERIFIED_ADDRESSES.A_VAULT, isWritable: true, isSigner: false },
        { pubkey: VERIFIED_ADDRESSES.A_VAULT_LP, isWritable: true, isSigner: false },
        { pubkey: VERIFIED_ADDRESSES.A_VAULT_LP_MINT, isWritable: true, isSigner: false },
        { pubkey: VERIFIED_ADDRESSES.A_TOKEN_VAULT, isWritable: true, isSigner: false },
      ];
      
      const chainlinkAccounts = [
        { pubkey: VERIFIED_ADDRESSES.SOL_USD_FEED, isWritable: false, isSigner: false },
        { pubkey: VERIFIED_ADDRESSES.CHAINLINK_PROGRAM, isWritable: false, isSigner: false },
      ];
      
      // Para slot 3, n√£o incluir contas do airdrop na transa√ß√£o principal
      const mainRemainingAccounts = [...vaultAAccounts, ...chainlinkAccounts, ...(isSlot3 ? uplineAccounts : [])];
      
      console.log(`üìä Contas da transa√ß√£o principal: ${mainRemainingAccounts.length + 4}`); // +4 para os fixed accounts
      console.log(`  - Vault A: 4 contas`);
      console.log(`  - Chainlink: 2 contas`);
      
      if (isSlot3) {
        const uplineCount = referrerInfo.upline?.upline?.length || 0;
        console.log(`  - Uplines: ${uplineCount * 2} contas (${uplineCount} uplines)`);
        console.log(`  - Contas de airdrop ser√£o processadas em transa√ß√£o separada`);
      } else {
        console.log(`  - Uplines: 0 contas (n√£o √© slot 3)`);
      }
      
      // Gerar instru√ß√£o principal
      const registerIx = await program.methods
        .registerWithSolDeposit(new BN(DEPOSIT_AMOUNT))
        .accounts({
          state: STATE_ADDRESS,
          userWallet: walletKeypair.publicKey,
          referrer: referrerPDA,
          referrerWallet: referrerAddress,
          user: userPDA,
          userWsolAccount: userWsolAccount,
          userDonutAccount: userDonutAccount,
          wsolMint: VERIFIED_ADDRESSES.WSOL_MINT,
          pool: VERIFIED_ADDRESSES.POOL_ADDRESS,
          bVault: VERIFIED_ADDRESSES.B_VAULT,
          bTokenVault: VERIFIED_ADDRESSES.B_TOKEN_VAULT,
          bVaultLpMint: VERIFIED_ADDRESSES.B_VAULT_LP_MINT,
          bVaultLp: VERIFIED_ADDRESSES.B_VAULT_LP,
          vaultProgram: VERIFIED_ADDRESSES.METEORA_VAULT_PROGRAM,
          programSolVault: programSolVault,
          tokenMint: VERIFIED_ADDRESSES.TOKEN_MINT,
          protocolTokenFee: VERIFIED_ADDRESSES.PROTOCOL_TOKEN_B_FEE,
          ammProgram: VERIFIED_ADDRESSES.METEORA_AMM_PROGRAM,
          tokenProgram: SPL_TOKEN_PROGRAM_ID,
          systemProgram: SystemProgram.programId,
          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
          rent: SYSVAR_RENT_PUBKEY,
        })
        .remainingAccounts(mainRemainingAccounts)
        .instruction();
      
      // Adicionar instru√ß√£o principal
      mainInstructions.push(registerIx);
      
      console.log(`üì¶ Total de instru√ß√µes na transa√ß√£o principal: ${mainInstructions.length}`);
      
      // Criar mensagem V0 com ALT
      const messageV0 = new TransactionMessage({
        payerKey: walletKeypair.publicKey,
        recentBlockhash: blockhash,
        instructions: mainInstructions
      }).compileToV0Message([lookupTableAccount]);
      
      // Criar e assinar transa√ß√£o
      const mainTransaction = new VersionedTransaction(messageV0);
      mainTransaction.sign([walletKeypair]);
      
      console.log("‚úÖ Transa√ß√£o principal preparada com ALT");
      
      // Enviar a transa√ß√£o principal
      console.log("\nüì§ ENVIANDO TRANSA√á√ÉO PRINCIPAL...");
      
      try {
        // Enviar transa√ß√£o
        const txid = await connection.sendTransaction(mainTransaction, {
          skipPreflight: true,
          maxRetries: 3
        });
        
        console.log(`‚úÖ Transa√ß√£o principal enviada: ${txid}`);
        console.log(`üîç Explorer: https://explorer.solana.com/tx/${txid}?cluster=devnet`);
        
        // Verificar confirma√ß√£o
        console.log(`\n‚è≥ Aguardando confirma√ß√£o da transa√ß√£o principal (timeout: 60s)...`);
        const result = await checkSignatureStatus(connection, txid, 60000);
        
        if (result.confirmed) {
          console.log(`‚úÖ Transa√ß√£o principal confirmada com status: ${result.status}!`);
          
          // Aguardar um pouco para garantir que o estado da rede esteja atualizado
          console.log("\n‚è≥ Aguardando 5 segundos para o estado da rede atualizar...");
          await sleep(5000);
          
          // Se for slot 3, executar a transa√ß√£o de registro no airdrop separadamente
          if (isSlot3 && airdropInfo) {
            console.log("\nü™Ç PREPARANDO TRANSA√á√ÉO DE AIRDROP SEPARADA...");
            
            // Obter novo blockhash para a segunda transa√ß√£o
            const airdropRecentBlockhash = await connection.getLatestBlockhash('confirmed');
            
            // Criar instru√ß√µes para a transa√ß√£o de airdrop
            const airdropInstructions = [];
            
            // Adicionar instru√ß√µes de compute budget
            const airdropComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({
              units: 200_000 // Valor mais baixo √© suficiente para esta transa√ß√£o simples
            });
            airdropInstructions.push(airdropComputeUnits);
            
            // Prioridade alta para garantir confirma√ß√£o r√°pida
            const airdropPriority = ComputeBudgetProgram.setComputeUnitPrice({
              microLamports: 250000
            });
            airdropInstructions.push(airdropPriority);
            
            // Criar instru√ß√£o para o registro no airdrop
            const airdropIx = createAirdropRegistrationInstruction(
              referrerAddress,
              airdropInfo.programStatePda,
              airdropInfo.userAccountPda,
              airdropInfo.currentWeekDataPda,
              airdropInfo.nextWeekDataPda,
              airdropInfo.userExists,
              MATRIX_PROGRAM_ID
            );
            
            airdropInstructions.push(airdropIx);
            
            console.log(`üì¶ Total de instru√ß√µes na transa√ß√£o de airdrop: ${airdropInstructions.length}`);
            
            // Criar mensagem para transa√ß√£o de airdrop
            const airdropMessage = new TransactionMessage({
              payerKey: walletKeypair.publicKey,
              recentBlockhash: airdropRecentBlockhash.blockhash,
              instructions: airdropInstructions
            }).compileToV0Message();
            
            // Criar e assinar transa√ß√£o de airdrop
            const airdropTransaction = new VersionedTransaction(airdropMessage);
            airdropTransaction.sign([walletKeypair]);
            
            console.log("‚úÖ Transa√ß√£o de airdrop preparada");
            
            // Enviar transa√ß√£o de airdrop
            try {
              console.log("\nüì§ ENVIANDO TRANSA√á√ÉO DE AIRDROP...");
              
              const airdropTxId = await connection.sendTransaction(airdropTransaction, {
                skipPreflight: true,
                maxRetries: 3
              });
              
              console.log(`‚úÖ Transa√ß√£o de airdrop enviada: ${airdropTxId}`);
              console.log(`üîç Explorer: https://explorer.solana.com/tx/${airdropTxId}?cluster=devnet`);
              
              // Verificar confirma√ß√£o da transa√ß√£o de airdrop
              console.log(`\n‚è≥ Aguardando confirma√ß√£o da transa√ß√£o de airdrop (timeout: 60s)...`);
              const airdropResult = await checkSignatureStatus(connection, airdropTxId, 60000);
              
              if (airdropResult.confirmed) {
                console.log(`‚úÖ Transa√ß√£o de airdrop confirmada com status: ${airdropResult.status}!`);
              } else {
                console.log(`‚ö†Ô∏è Transa√ß√£o de airdrop n√£o confirmada: ${airdropResult.error}`);
                console.log(`‚ö†Ô∏è O registro principal foi conclu√≠do, mas o airdrop pode n√£o ter sido processado.`);
              }
            } catch (airdropError) {
              console.log("‚ö†Ô∏è Erro na transa√ß√£o de airdrop, mas o registro principal foi conclu√≠do");
              console.error(airdropError);
            }
          }
          
          // Verificar resultados
          console.log("\nüîç VERIFICANDO RESULTADOS...");
          
          const userInfo = await program.account.userAccount.fetch(userPDA);
          console.log("\nüìã REGISTRO CONFIRMADO:");
          console.log("‚úÖ Registrado: " + userInfo.isRegistered);
          console.log("üë• Referenciador: " + userInfo.referrer.toString());
          console.log("üî¢ Profundidade: " + userInfo.upline.depth);
          console.log("üë§ Owner Wallet: " + userInfo.ownerWallet.toString());
          
          // Verificar referenciador ap√≥s registro
          const newReferrerInfo = await program.account.userAccount.fetch(referrerPDA);
          console.log("\nüìã REFERENCIADOR AP√ìS REGISTRO:");
          console.log("üìä Slots: " + newReferrerInfo.chain.filledSlots + "/3");
          
          if (newReferrerInfo.reservedSol > 0) {
            console.log("üí∞ SOL Reservado: " + newReferrerInfo.reservedSol / 1e9 + " SOL");
          }
          
          // Se foi slot 3, verificar recurs√£o
          if (isSlot3) {
            console.log("\nüîÑ VERIFICANDO RECURS√ÉO:");
            let processedCount = 0;
            
            // Verificar uplines processados
            for (let i = 0; i < uplineAccounts.length; i += 2) {
              try {
                const uplinePDA = uplineAccounts[i].pubkey;
                const uplineInfo = await program.account.userAccount.fetch(uplinePDA);
                
                // Verificar se referenciador foi adicionado
                for (let j = 0; j < uplineInfo.chain.filledSlots; j++) {
                  if (uplineInfo.chain.slots[j]?.equals(referrerPDA)) {
                    console.log(`  ‚úÖ Referenciador adicionado ao slot ${j + 1} de ${uplinePDA.toString()}`);
                    processedCount++;
                    break;
                  }
                }
              } catch (e) {
                console.log(`  ‚ùå Erro ao verificar upline: ${e.message}`);
              }
            }
            
            console.log(`  üìä Recurs√£o processou ${processedCount} uplines`);
            
            // Verificar se o usu√°rio foi registrado no programa de airdrop
            try {
              const [userAccountPda] = PublicKey.findProgramAddressSync(
                [Buffer.from("user_account", "utf8"), referrerAddress.toBuffer()],
                VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID
              );
              
              const airdropUserAccountInfo = await connection.getAccountInfo(userAccountPda);
              if (airdropUserAccountInfo && airdropUserAccountInfo.owner.equals(VERIFIED_ADDRESSES.AIRDROP_PROGRAM_ID)) {
                console.log(`  ‚úÖ Usu√°rio registrado com sucesso no programa de airdrop`);
              } else {
                console.log(`  ‚ùå Usu√°rio N√ÉO foi registrado no programa de airdrop`);
              }
            } catch (error) {
              console.log(`  ‚ùå Erro ao verificar registro no airdrop: ${error.message}`);
            }
          }
          
          // Verificar DONUT ATA depois da transa√ß√£o
          const finalDonutInfo = await connection.getAccountInfo(userDonutAccount);
          if (finalDonutInfo) {
            console.log("\nüç© ATA DONUT ap√≥s transa√ß√£o: ‚úÖ Existe");
          } else {
            console.log("\nüç© ATA DONUT ap√≥s transa√ß√£o: ‚ùå N√£o existe");
          }
          
          // Novo saldo
          const newBalance = await connection.getBalance(walletKeypair.publicKey);
          console.log("\nüíº Novo saldo: " + newBalance / 1e9 + " SOL");
          console.log("üí∏ Gasto total: " + (balance - newBalance) / 1e9 + " SOL");
          
          console.log("\nüéâ REGISTRO CONCLU√çDO COM SUCESSO! üéâ");
          console.log("=====================================================");
        } else {
          console.log(`‚ùå Transa√ß√£o principal n√£o confirmada: ${result.error}`);
          throw new Error(`Transa√ß√£o principal n√£o confirmada: ${result.error}`);
        }
      } catch (error) {
        console.error(`‚ùå ERRO NA TRANSA√á√ÉO PRINCIPAL: ${error.message}`);
        
        if (error.logs) {
          console.log(`\nüìã LOGS DE ERRO:`);
          error.logs.forEach((log, i) => console.log(`${i}: ${log}`));
        }
        
        throw error;
      }
    } catch (error) {
      console.error("‚ùå ERRO AO REGISTRAR:", error.message);
      
      if (error.logs) {
        console.log("\nüìã LOGS DE ERRO DETALHADOS:");
        error.logs.forEach((log, i) => {
          console.log(`${i}: ${log}`);
          
          // Detectar erros espec√≠ficos
          if (log.includes("airdrop") || log.includes("ProgramError")) {
            console.log(`  ‚ö†Ô∏è LOG CR√çTICO: ${log}`);
          }
        });
      }
    }
    
  } catch (error) {
    console.error("‚ùå ERRO GERAL:", error.message);
  }
}

main();